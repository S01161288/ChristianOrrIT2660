port java.util.LinkedList;

public class DepthFirstSearchNode
{
  private boolean checked ;
  private int data;
  private LinkedList<DepthFirstSearchNode> other
  
     public boolean check()
   {
       return checked;
   }

   public void setcheck(boolean newcheck)
   {
       checked = newchecked;
   }
  
   public void addother(DepthFirstSearchNode newother)
   {
       other.add(newother);
   }

   public LinkedList<DepthFirstSearchNode> getother()
   {
       return other;
   }

   public void setother(LinkedList<DepthFirstSearchNode> newother)
   {
       other = newother;
   }
   public DepthFirstSearchNode(int newData)
   {
       data = newData;
       other = new LinkedList<DepthFirstSearchNode>();
   }
  
   public int getData()
   {
       return data;
   }
  
   public void setData(int newData)
   {
       data = newData;
   }
   public String toString()
   {
       return "" + data;
   }
} \\ This is the end of the node class

import java.util.Queue;
import java.util.LinkedList;
public class BreadthFirstSearchProblem
{
   public DepthFirstSearchProgram()
   {}
   public int d(DepthFirstSearchNode node, LinkedList<DepthFirstSearchNode> list)
   {
     int count = 0;
     DepthNode currNode = stack.pop()
     if (!currNode.check())
           {
               list.add(currNode);
               currNode.setcheck(true);
           }
     queue.add(node);
     node.setcheck(true);
       LinkedList<DepthFirstSearchNode> other = currNode.getother();
              int k = 0;
              while( k < other){
               k++
               count++;
               DepthFirstSearchNode temp = other.get(k);
               if (temp != null && !temp.check())
               {
                   stack.add(temp);
               }
           }
       }
